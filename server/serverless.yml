service: boston-open-mics-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  timeout: 30
  memorySize: 512
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    STAGE: ${opt:stage, 'dev'}
    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    VENUES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-venues
    EVENTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-events
    SIGNUPS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-signups
    CONVERSATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-conversations
    MESSAGES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-messages
    CONVERSATION_PARTICIPANTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-conversation-participants
    INVITATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-invitations
    TOKENS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-tokens
    SES_FROM_EMAIL: ${env:SES_FROM_EMAIL, 'noreply@bostonshowtime.com'}
    SES_REGION: ${opt:region, self:provider.region}
    FROM_EMAIL: ${env:FROM_EMAIL, 'noreply@bostonshowtime.com'}
    PLATFORM_URL: ${env:PLATFORM_URL, 'https://bostonshowtime.com'}
  
  # IAM role permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SIGNUPS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONVERSATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONVERSATION_PARTICIPANTS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INVITATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TOKENS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SIGNUPS_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONVERSATIONS_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONVERSATION_PARTICIPANTS_TABLE}/index/*"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INVITATIONS_TABLE}/index/*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"

functions:
  api:
    handler: lambda-dynamodb.handler
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

# plugins:
#   - serverless-offline

# custom:
#   serverless-offline:
#     httpPort: 3001
#     host: 0.0.0.0

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    VenuesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.VENUES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: owner_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: OwnerIndex
            KeySchema:
              - AttributeName: owner_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EVENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: host_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: HostIndex
            KeySchema:
              - AttributeName: host_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    SignupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SIGNUPS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: event_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventIndex
            KeySchema:
              - AttributeName: event_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONVERSATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: participant_1_id
            AttributeType: S
          - AttributeName: participant_2_id
            AttributeType: S
          - AttributeName: event_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: Participant1Index
            KeySchema:
              - AttributeName: participant_1_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Participant2Index
            KeySchema:
              - AttributeName: participant_2_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EventIndex
            KeySchema:
              - AttributeName: event_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: conversation_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: sender_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ConversationIndex
            KeySchema:
              - AttributeName: conversation_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: SenderIndex
            KeySchema:
              - AttributeName: sender_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ConversationParticipantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONVERSATION_PARTICIPANTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: conversation_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ConversationIndex
            KeySchema:
              - AttributeName: conversation_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    InvitationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.INVITATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: event_id
            AttributeType: S
          - AttributeName: invitee_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventIndex
            KeySchema:
              - AttributeName: event_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: InviteeIndex
            KeySchema:
              - AttributeName: invitee_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

# Package configuration
package:
  patterns:
    - '!.git/**'
    - '!README.md'
    - '!test-data/**'
    - '!*.md'
  excludeDevDependencies: true